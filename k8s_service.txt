							Service
Service:
--------
-> Service is reponsible to make our POD's accessible/discoverable inside and outside of the cluster
-> Service will identify the pod using POD labels/selector
-> service is used to expose the pods

To get all services
#kubectl get svc
Schedule a service using yaml file
#kubectl apply -f service_name

In kubernetes services are three types.
1. ClusterIP---> when we use cluster Ip service is accessible with in the cluster 
-> It will generate one virtual IP.
 
2. NodePort-----> when we use NodePort to expose our service outside cluster(only one worker node)
for NodePort service kubernetes will assign random port number we don't specify 

Q. What is the range of NodePort in k8s cluster?
Ans: 30000-32767
3. LoadBalancer--> this is the external service (mutiple worker nodes)


Service is exposing the pod using cluster IP.



Replication Controller:
-----------------
-> It is resposible to manage POD lifecycle
-> It will make sure give no.of POD replicas are running at any ponit of time.
-> ReplicationController is resposible to create the replica (replica means copy)

Note: If any POD got delete/dead then the replication controller will replace it.

-> Using Replication Controller we can achive High Availability

pod creation using replication controller
apiVersion: v1
kind: ReplicationController
metadata:
  name: myrs
spec:    ----> this specifications are 
  replicas: 1
  selector:
    app: nginx
  template:
    metadata:
	  name: nginxpod
	  labels:    --> labels are used to associate replication controller and pods  
	    app: nginx   --> label name and selector name should be same.
	spec:  ----> pod specifications
	  container:
	  - name: nginxcontainer
	    image: sajithsaaji/batch730app
		ports:
		- containerPort: 80

ReplicationController create a pod by using pod specifications with one replica

service to expose the pod outside the cluster 
apiVersion: v1
kind: Service
metadata: 
  name: nginxsvc
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort:80
	
	
Deployment: when ever we create a deploment that time by default it will create replicaset, and pods 
-> By using deployment we can rollout and rollback our application
-> We can achieve Auto-Scalling using deployment

Deployment Strategy:
1. ReCreat-- It means completely your application will be stoped then only code will be deployed to production then they will up application.

2. Rolling Update ---  
3. Blue/Green 
#kubectl create deployment deployment_name --image=image_name
#kubectl create deployment nginxdp --image=nginx
#kubectl get deploy   ---> it shows the deployments
#kubectl get rs       ----> it shows the replicasets
#kubectl get pods     -----> it shows the pods
#kubectl expose deploy mynginx --type=NodePort --port=80
#kubectl get svc

POD Deployment manifest
apiVersion: apps/v1
kind: Deployment
metadata:
 name: mydep
spec:     ---> this is deploment specifications 
 replicas: 1
 strategy:
  type: Recreate
selector:
 matchLabels:
  app: javawebapp
template:    ---> this pod template
 metadata: mypod
 labels: 
  app: javawebapp
 spec:
  containers:
  - name: mycont
    image: ashokit/javawebapp
	ports:
	- containerPort: 8080

#service manifest it is used to expose the pod outside the cluster 
apiVersion: v1
kind: Service
metadata:
 name: javawebappsvc
spec:
 type: NodePort
 selector: 
  app: javawebapp
 ports:
 - port: 80
   targetPort: 8080
